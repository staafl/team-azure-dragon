@{
    ViewBag.Title = "Index";
}
<h2>Lessons</h2>
@using (Html.BeginForm())
{
    @(Html.Kendo().Grid<LearningSystem.App.Areas.Administration.ViewModels.LessonViewModel>()
    .Name("Grid")
    .Columns(columns =>
        {
            columns.Bound(l => l.Skill).ClientTemplate("#= data.Skill.Name #").EditorTemplateName("SkillDropdown");
            columns.Bound(l => l.Name);
            columns.Bound(l => l.Description);
            //columns.Bound(l => l.Requirements).ClientTemplate("#=generateRequirementTemplate(Requirements)#");//.EditorTemplateName("RequermentCheckBoxList");
            columns.Bound(l => l.Requirements).ClientTemplate("#= generateRequirementTemplate(data.Requirements) #").EditorTemplateName("MultiSelectRequierments");
            columns.Command(commands =>
            {
                commands.Edit();
                commands.Destroy();
                commands.Custom("View Details").Click("showDetails");
                commands.Custom("Exercises").Click("showExercises");
            }).Title("Commands").Width(350);
        })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine))//.TemplateName("_LessonTemplate"))
    .DataSource(datasource => datasource
        .Ajax()
        .PageSize(5)
        .Model(model =>
        {
            model.Id(lesson => lesson.LessonId);
            model.Field(lesson => lesson.LessonId).Editable(false);
            //model.Field(lesson => lesson.Requirements).Editable(false);
        })
        .ServerOperation(false) // TODO: ???
        .Read(read => read.Action("Read", "Lesson"))
        .Create(create => create.Action("Create", "Lesson"))
        .Update(update => update.Action("Edit", "Lesson"))
        .Destroy(destroy => destroy.Action("Delete", "Lesson"))
    )
    .Pageable()
    .Sortable()
    )
    @Html.AntiForgeryToken()
}

<script>
    function showDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("Details", "Lesson", new { id = "_id" })';
        window.location.href = url.replace('_id', dataItem.LessonId);
    }
    function showExercises(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("Index", "Exercise", new { id = "_id" })';
        window.location.href = url.replace('_id', dataItem.LessonId);
    }
    function generateRequirementTemplate(data) {
        var template = "";
        if (data) {
            for (var i = 0; i < data.length; i++) {
                template = template + data[i].Name + "<br />";
            }
        }
        return template;
    }
</script>
